{
  "name": "nodejitsu-api",
  "version": "0.4.6",
  "description": "nodejitsu API client wrapper",
  "keywords": [
    "nodejitsu",
    "nodejitsu-api"
  ],
  "homepage": "http://github.com/nodejitsu/nodejitsu-api",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodejitsu/nodejitsu-api.git"
  },
  "main": "./lib/client.js",
  "scripts": {
    "test": "vows --spec ./test/commands/*-test.js"
  },
  "dependencies": {
    "request": "2.16.2"
  },
  "devDependencies": {
    "vows": "0.7.x",
    "nock": "0.14.x"
  },
  "author": {
    "name": "Nodejitsu Inc.",
    "email": "info@nodejitsu.com"
  },
  "maintainers": [
    {
      "name": "AvianFlu",
      "email": "avianflu@nodejitsu.com"
    },
    {
      "name": "Farrin Reid",
      "email": "farrin.reid@nodejitsu.com"
    }
  ],
  "readme": "# nodejitsu-api\n\nThe `nodejitsu-api` is a module that allows you to communicate with the our\n[RESTful API][REST]\n\n## Installation:\n\nThis module is published in NPM:\n\n```\n  npm install nodejitsu-api --save\n```\n\nThe `--save` tells NPM to automatically add it to your `package.json` file\n\n## API documentation\n\nBefore you can use the API you need to create a new API client. In this example\nwe are going to assume that `foo` is your username and `bar` is the password of\nNodejitsu account you want to control.\n\n### api.createClient(options)\n\nThe `createClient` method generates a new API client. It accepts an options\nargument which is used to configure the client.\n\n##### options:\n\n- `username` **string** The username of your Nodejitsu account\n- `password` **string** The password or auth token of your account\n- `remoteUri` **string** The Nodejitsu API resource\n- `debug` **boolean** Output debugging information to the console\n- `proxy` **string** HTTP proxy to connect over\n- `timeout` **number** How long can a single API requests before we time it out\n- `ignorePoweredBy` **boolean** Ignore the check for the `x-powered-by` header\n\nThis options argument can either be an object with the properties specified\nabove or a [nconf][nconf] object.\n\nThe `remoteUri` argument is a required argument. Most API calls also require the\n`username` and `password` to be specified. There a couple of API call where this\nis not required, this is documented by the relevant API calls.\n\n```js\nvar api = require('nodejitsu-api');\n\n// Construct a new client.\nvar client = api.createClient({\n  username: 'foo',\n  password: 'bar',\n  remoteUri: 'https://api.nodejitsu.com'\n});\n```\n\n### client\n\nThe API calls are generally constructed as `resource` and `action`:\n\n``` js\nclient.resource.action('data', function (err, result) {\n  if (err) {\n    throw err;\n  }\n\n  // Use the result\n});\n```\n\nThe following API resources are exposes in the module:\n\n- [apps][apps] Manage your application instances.\n  - [apps.available][apps.available]\n  - [apps.list][apps.list]\n  - [apps.create][apps.create]\n  - [apps.view][apps.view]\n  - [apps.update][apps.update]\n  - [apps.start][apps.start]\n  - [apps.stop][apps.stop]\n  - [apps.restart][apps.restart]\n  - [apps.setDrones][apps.setdrones]\n  - [apps.datacenter][apps.datacenter]\n  - [apps.destroy][apps.destroy]\n  - [apps.endpoints][apps.endpoints]\n- [databases][databases] Manage your databases.\n  - [databases.create][databases.create]\n  - [databases.get][databases.get]\n  - [databases.list][databases.list]\n  - [databases.destroy][databases.destroy]\n- [logs][logs] Manage your application logs.\n  - [logs.byApp][logs.byapp]\n  - [logs.byUser][logs.byuser]\n- [snapshots][snapshots] Manage your application snapshots.\n  - [snapshots.list][snapshots.list]\n  - [snapshots.create][snapshots.create]\n  - [snapshots.fetch][snapshots.fetch]\n  - [snapshots.destroy][snapshots.destroy]\n  - [snapshots.activate][snapshots.activate]\n- [users][users] Manage your Nodejitsu account.\n- [users.auth][users.auth]\n- [users.create][users.create]\n- [users.available][users.available]\n- [users.view][users.view]\n- [users.confirm][users.confirm]\n- [users.forgot][users.forgot]\n- [users.update][users.update]\n- [users.destroy][users.destroy]\n\n[apps]: #clientapps\n[apps.available]: #clientappsavailable\n[apps.list]: #clientappslist\n[apps.create]: #clientappscreate\n[apps.view]: #clientappsview\n[apps.update]: #clientappsupdate\n[apps.start]: #clientappsstart\n[apps.stop]: #clientappsstop\n[apps.restart]: #clientappsrestart\n[apps.setdrones]: #clientappssetDrones\n[apps.datacenter]: #clientappsdatacenter\n[apps.destroy]: #clientappsdestroy\n[apps.endpoints]: #clientappsendpoints\n\n[databases]: #clientdatabases\n[databases.create]: #clientdatabasescreate\n[databases.get]: #clientdatabasesget\n[databases.list]: #clientdatabaseslist\n[databases.destroy]: #clientdatabasesdestroy\n\n[logs]: #clientlogs\n[logs.byapp]: #clientlogsbyapp\n[logs.byUser]: #clientlogsbyuser\n\n[snapshots]: #clientsnapshots\n[snapshots.list]: #clientsnapshots.list\n[snapshots.create]: #clientsnapshots.create\n[snapshots.fetch]: #clientsnapshots.fetch\n[snapshots.destroy]: #clientsnapshots.destroy\n[snapshots.activate]: #clientsnapshots.activate\n\n[users]: #clientusers\n[users.auth]: #clientusersauth\n[users.create]: #clientuserscreate\n[users.available]: #clientusersavailable\n[users.view]: #clientusersview\n[users.confirm]: #clientusersconfirm\n[users.forgot]: #clientusersforgot\n[users.update]: #clientusersupdate\n[users.destroy]: #clientusersdestroy\n\n### client.app\n#### client.apps.available\n\nChecks if the available of the applications name and sub domain is currently\ntaken in Nodejitsu.\n\n##### Arguments\n\n- `app` **string** The application name\n- `callback` **function** \n\n```js\nclient.app.available('my-application', function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.apps.list\n\nList all the applications for the authenticated user.\n\n##### Arguments\n\n- `username` **string** The username, which is optional and will default to the\n  configured username\n- `callback` **function** The callback receives an array of your applications\n\n```js\nclient.app.list('my-application', function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.apps.create\n\nCreate an application from the specified `package.json` object.\n\n##### Arguments\n\n- `app` **object** The package.json\n- `callback` **function**\n\n```js\nvar app = require('./package.json'); // requires your package.json as example\nclient.apps.create(app, function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.apps.view\n\nViews the application details for one specific application.\n\n##### Arguments\n\n- `app` **string** Name of the application\n- `callback` **function** The callback receives your application details\n\n```js\nclient.apps.view('my-application-name', function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.apps.update\n\nUpdates the the application details.\n\n##### Arguments\n\n- `app` **string** Name of the application\n- `changes` **Object** Properties that need to be updated for this application\n- `callback` **function**\n\n```js\nclient.apps.update('my-application-name', { name: 'foo' }, function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.apps.start\n\nStart the application.\n\n##### Arguments\n\n- `app` **string** Name of the application\n- `callback` **function**\n\n```js\nclient.apps.start('my-application-name', function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.apps.stop\n\nStop the application.\n\n##### Arguments\n\n- `app` **string** Name of the application\n- `callback` **function**\n\n```js\nclient.apps.stop('my-application-name', function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.apps.restart\n\nRestarts the application without changing a drone. Where stopping and starting\nan application could result in deployment on a different drone.\n\n##### Arguments\n\n- `app` **string** Name of the application\n- `callback` **function**\n\n```js\nclient.apps.stop('my-application-name', function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.apps.setDrones\n\nRun the application on `x` amount of drones on the Nodejitsu servers.\n\n##### Arguments\n\n- `app` **string** Name of the application\n- `drones` **number** The amount of drones the application needs to run on\n- `callback` **function**\n\n```js\nclient.apps.setDrones('my-application-name', 10, function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.apps.datacenter\n\nMove the application to a new datacenter.\n\n##### Arguments\n\n- `app` **string** Name of the application\n- `cloud` **object** The datacenter configuration\n  - `provider` **string** Name of the cloud provider\n  - `datacenter` **string** Data center identifier\n  - `drones` **number** The amount of drones you want to start on this datacenter\n- `callback` **function**\n\n```js\nvar cloud = {\n  provider: 'joyent',\n  datacenter: 'eu-ams-1',\n  drones: 6\n}\nclient.apps.datacenter('my-application-name', cloud, function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.apps.destroy\n\nDestroys the application.\n\n##### Arguments\n\n- `app` **string** Name of the application\n- `callback` **function**\n\n```js\nclient.apps.destroy('my-application-name', function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.apps.endpoints\n\nGet a list of all datacenter providers and datacenter identifiers.\n**Please note: this method doesn't require any authentication.**\n\n##### Arguments\n\n- `callback` **function**\n\n```js\nclient.apps.destroy('my-application-name', function (err, data) {\n  console.log(data);\n});\n```\n\n### client.databases\n#### client.databases.create\n\nCreate a new database. These databases are created by third party providers you\ncan find more information about each database provider in\n[webops/databases][webops/databases]\n\n##### Arguments\n\n- `type` **string** Database type (mongo, monghq, redis, redistogo, couch)\n- `name` **string** Name of the database\n- `callback` **function** \n\n```js\nclient.databases.create('redis', 'my-iriscouch-redis-db', function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.databases.get\n\nGet the database information which contains the connection details\n\n##### Arguments\n\n- `name` **string** Name of the database\n- `callback` **function** \n\n```js\nclient.databases.get('my-iriscouch-redis-db', function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.databases.list\n\nGet the all databases and their information.\n\n##### Arguments\n\n- `username` **string** The username, which is optional and will default to the\n  configured username\n- `callback` **function**\n\n```js\nclient.databases.list('username', function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.databases.destroy\n\nDestroy the specified database.\n\n##### Arguments\n\n- `name` **string** Name of the database you want to destroy\n- `callback` **function**\n\n```js\nclient.databases.list('username', function (err, data) {\n  console.log(data);\n});\n```\n\n### client.logs\n#### client.logs.byApp\n\nFetches the logs for the given application.\n\n##### Arguments\n\n- `name` **string** Name of the application\n- `amount` **number** The amount logs to retrieve\n- `callback` **function** \n\n```js\nclient.logs.byApp('my-application', 50, function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.logs.byUser\n\nFetches the logs for every application for the specified user.\n\n##### Arguments\n\n- `username` **string** The username, which is optional and will default to the\n  configured username\n- `amount` **number** The amount logs to retrieve\n- `callback` **function** \n\n```js\nclient.logs.byUser('foo', 50, function (err, data) {\n  console.log(data);\n});\n```\n\n### client.snapshots\n#### client.snapshots.list\n\nLists all snapshots for the given application\n\n##### Arguments\n\n- `name` **string** Name of the application\n- `callback` **function** \n\n```js\nclient.snapshots.list('my-application', function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.snapshots.create\n\nUploads a new snapshot for the application. This method assumes that you have a\nproperly packed `.tgz` application on your system. The `.tgz` should have the\nsame internal structure as the result of an `npm pack`.\n\n##### Arguments\n\n- `name` **string** Name of the application that receives the snapshot\n- `snapshotname`: **string** Name of the snapshot\n- `location`: **string** absolute path to the `.tgz` snapshot\n- `callback` **function** \n\n```js\nclient.snapshots.create('my-application', '0.1.0', '/app.tgz', function (err, data) {\n  console.log(data);\n});\n```\n\nPlease note that this method returns an event emitter which you can use to track\nthe progress of the upload. This event emitter emits and `data` event with the\namount of data uploaded and emits the `end` event once the upload been\ncompleted.\n\n#### client.snapshots.fetch\n\nFetches the snapshot from your application. Please note that these snapshots are\nthe actual state of the application that is ran on the drones, so these will\ncontain the `node_modules` folder.\n\n##### Arguments\n\n- `name` **string** Name of the application\n- `snapshotname` **string** Name of the snapshot that you want to download\n- `callback` **function** \n\n```js\nclient.snapshots.fetch('my-application', '0.1.0', function (err, data) {\n  console.log(data);\n});\n```\n\nThis function returns the Stream that fetches the snapshot. You can use\nthis Stream to `Stream.pipe` it to a file on your system. The callback would\nonly indicate a successful fetch.\n\n#### client.snapshots.destroy\n\nDestroy the snapshot.\n\n##### Arguments\n\n- `name` **string** Name of the application\n- `snapshotname` **string** Name of the snapshot that you want to download\n- `callback` **function** \n\n```js\nclient.snapshots.destroy('my-application', '0.1.0', function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.snapshots.activate\n\nActivates a snapshot. This allows you to roll back to a old version when\nsomething goes wrong in your application.\n\n##### Arguments\n\n- `name` **string** Name of the application\n- `snapshotname` **string** Name of the snapshot that you want to download\n- `callback` **function** \n\n```js\nclient.snapshots.activate('my-application', '0.0.45', function (err, data) {\n  console.log(data);\n});\n```\n### client.users\n#### client.users.auth\n\nTests if the users login details are valid.\n\n##### Arguments\n\n- `callback` **function** \n\n```js\nclient.users.auth(function (err, authenticated) {\n  console.log(authenticated);\n});\n```\n\n#### client.users.create\n\nRegister a new Nodejitsu account.\n**Please note: this method doesn't require any authentication.**\n\n##### Arguments\n\n- `account` **object** account details\n  - `username` **string** username\n  - `passowrd` **string** password\n  - `email` **string** e-mail address that receives the verification code\n- `callback` **function** \n\n```js\nvar account = {\n  username: 'foo',\n  password: 'bar',\n  email: 'foo@example.com'\n};\n\nclient.users.create(account, function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.users.available\n\nTest if the username is available.\n**Please note: this method doesn't require any authentication.**\n\n##### Arguments\n\n- `username` **string** username\n- `callback` **function** \n\n```js\nclient.users.available('foo', function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.users.view\n\nRetrieves the user details.\n\n##### Arguments\n\n- `username` **string** username\n- `callback` **function** \n\n```js\nclient.users.view('foo', function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.users.confirm\n\nConfirm the e-mail address of the user.\n**Please note: this method doesn't require any authentication.**\n\n##### Arguments\n\n- `user` **object** confirmation details\n  - `username` **string** the username that we are confirming\n  - `inviteCode` **string** the inviteCode that was send to the users e-mail\n- `callback` **function** \n\n```js\nvar user = {\n  username: 'foo',\n  inviteCode: 'foo-bar-bnanan-trololol'\n};\n\nclient.users.confirm(user, function (err, data) {\n  console.log(data);\n});\n```\n#### client.users.forgot\n\nRequest a password reset e-mail\n\n##### Arguments\n\n- `username` **string** username\n- `callback` **function** \n\n```js\nclient.users.forgot('foo', function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.users.update\n\nUpdates the account information.\n\n##### Arguments\n\n- `username` **string** username\n- `changes` **Object** Properties that need to be updated for this user.\n- `callback` **function** \n\n```js\nclient.users.update('foo', changes, function (err, data) {\n  console.log(data);\n});\n```\n\n#### client.users.destroy\n\nRemoves your account from the Nodejitsu platform. Use with extreme caution. This\nwill also destroy all the applications that you are running and databases that\nyou have created. **Once you call this method, there is no way back and no\noption to undo this**.\n\n##### Arguments\n\n- `username` **string** username\n- `callback` **function** \n\n```js\nclient.users.destroy('foo', function (err, data) {\n  console.log(data);\n});\n```\n\n## Tests\n\nAll tests are written with [vows](http://vowsjs.org) and should be run with\n[npm](http://npmjs.org):\n\n```bash\n$ npm test\n```\n\n## License\n\nMIT.\n\n[REST]: https://github.com/nodejitsu/handbook/tree/master/API.md\n[nconf]: https://github.com/flatiron/nconf\n[webops/databases]: https://webops.nodejitsu.com/databases\n",
  "_id": "nodejitsu-api@0.4.6",
  "dist": {
    "shasum": "d7936444b0bad6e65ec7b8efc40d64572d1cdfd1"
  },
  "_from": "nodejitsu-api@0.4.6"
}
